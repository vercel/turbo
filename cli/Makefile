TURBO_VERSION = $(shell head -n 1 ../version.txt)
TURBO_TAG = $(shell cat ../version.txt | sed -n '2 p')

ifeq ($(OS),Windows_NT)
	UNAME := Windows
else
	UNAME := $(shell uname -s)
endif

USE_CGO = 0
ifeq ($(UNAME), Darwin)
	USE_CGO = 1
endif

# Strip debug info
GO_FLAGS += "-ldflags=-s -w"

# Avoid embedding the build path in the executable for more reproducible builds
GO_FLAGS += -trimpath

CLI_DIR = $(shell pwd)

GO_FILES = $(shell find . -name "*.go")
SRC_FILES = $(shell find . -name "*.go" | grep -v "_test.go")
GENERATED_FILES = internal/turbodprotocol/turbod.pb.go internal/turbodprotocol/turbod_grpc.pb.go

turbo: $(GENERATED_FILES) $(SRC_FILES) go.mod
	CGO_ENABLED=$(USE_CGO) go build $(GO_FLAGS) ./cmd/turbo

protoc: internal/turbodprotocol/turbod.proto
	protoc --go_out=. --go_opt=paths=source_relative \
		--go-grpc_out=. --go-grpc_opt=paths=source_relative \
		internal/turbodprotocol/turbod.proto

$(GENERATED_FILES): internal/turbodprotocol/turbod.proto
	make protoc

compile-protos: $(GENERATED_FILES)

ewatch: scripts/...
	nodemon --exec "make e2e" -e .ts,.go

check-go-version:
	@go version | grep ' go1\.18\.0 ' || (echo 'Please install Go version 1.18.0' && false)

# This "TURBO_RACE" variable exists at the request of a user on GitHub who
# wants to run "make test-go" on an unsupported version of macOS (version 10.9).
# Go's race detector does not run correctly on that version. With this flag
# you can run "TURBO_RACE= make test-go" to disable the race detector.
TURBO_RACE ?= -race

clean-go:
	go clean -testcache ./...

test-go: $(GENERATED_FILES) $(GO_FILES) go.mod go.sum
	go test $(TURBO_RACE) ./...

# protos need to be compiled before linting, since linting needs to pick up
# some types from the generated code
lint-go: $(GENERATED_FILES) $(GO_FILES) go.mod go.sum
	golangci-lint run --new-from-rev=main

fmt-go: $(GO_FILES) go.mod go.sum
	go fmt ./...

install: | ./package.json
	pnpm install

e2e: install turbo
	node -r esbuild-register scripts/e2e/e2e.ts

cmd/turbo/version.go: ../version.txt
	# Update this atomically to avoid issues with this being overwritten during use
	node -e 'console.log(`package main\n\nconst turboVersion = "$(TURBO_VERSION)"`)' > cmd/turbo/version.go.txt
	mv cmd/turbo/version.go.txt cmd/turbo/version.go

build: install compile-protos cmd/turbo/version.go $(GENERATED_FILES)
	goreleaser release --snapshot --rm-dist
	cd $(CLI_DIR)/../packages/turbo-ignore && npm run build
	cd $(CLI_DIR)/../packages/create-turbo && npm run build
	cd $(CLI_DIR)/../packages/turbo-codemod && npm run build

prepublish:
	make -j3 bench/turbo test-go lint-go

publish: clean prepublish build
	@test main = "`git rev-parse --abbrev-ref HEAD`" || (echo "Refusing to publish from non-main branch `git rev-parse --abbrev-ref HEAD`" && false)
	@echo "Checking for unpushed commits..." && git fetch
	@test "" = "`git cherry`" || (echo "Refusing to publish with unpushed commits" && false)

	# Prepare the packages.
	cd $(CLI_DIR)/../packages/turbo && npm version "$(TURBO_VERSION)" --allow-same-version
	cd $(CLI_DIR)/../packages/turbo-ignore && npm version "$(TURBO_VERSION)" --allow-same-version
	cd $(CLI_DIR)/../packages/create-turbo && npm version "$(TURBO_VERSION)" --allow-same-version
	cd $(CLI_DIR)/../packages/turbo-codemod && npm version "$(TURBO_VERSION)" --allow-same-version

	git commit -am "publish $(TURBO_VERSION) to registry"
	git tag "v$(TURBO_VERSION)"

	# Publishes the native npm modules.
	goreleaser release --rm-dist

	# Publish the remaining JS packages in order to avoid race conditions.
	cd $(CLI_DIR)/../packages/turbo && npm publish --tag $(TURBO_TAG) --dry-run
	cd $(CLI_DIR)/../packages/turbo-ignore && npm publish --tag $(TURBO_TAG) --dry-run
	cd $(CLI_DIR)/../packages/create-turbo && npm publish --tag $(TURBO_TAG) --dry-run
	cd $(CLI_DIR)/../packages/turbo-codemod && npm publish --tag $(TURBO_TAG) --dry-run
	git push origin main "v$(TURBO_VERSION)"

demo/lage: install
	node $(CLI_DIR)/scripts/generate.mjs lage

demo/lerna: install
	node $(CLI_DIR)/scripts/generate.mjs lerna

demo/nx: install
	node $(CLI_DIR)/scripts/generate.mjs nx

demo/turbo: install
	node $(CLI_DIR)/scripts/generate.mjs turbo

demo: demo/lage demo/lerna demo/nx demo/turbo

bench/lerna: demo/lerna
	cd $(CLI_DIR)/demo/lerna && node_modules/.bin/lerna run build

bench/lage: demo/lage
	cd $(CLI_DIR)/demo/lage && node_modules/.bin/lage build

bench/nx: demo/nx
	cd $(CLI_DIR)/demo/nx && node_modules/.bin/nx run-many --target=build --all

bench/turbo: demo/turbo turbo
	cd $(CLI_DIR)/demo/turbo && $(CLI_DIR)/turbo run test

bench: bench/lerna bench/lage bench/nx bench/turbo

clean: clean-go clean-build clean-demo

clean-build:
	rm -f turbo

clean-demo:
	rm -rf node_modules
	rm -rf demo
