error[E0277]: the trait bound `UnresolvedValue: ResolvedValue` is not satisfied
 --> tests/derive_resolved_value/fail_simple_structs.rs:9:8
  |
9 |     a: UnresolvedValue,
  |        ^^^^^^^^^^^^^^^ the trait `ResolvedValue` is not implemented for `UnresolvedValue`
  |
  = help: the following other types implement trait `ResolvedValue`:
            &str
            ()
            (A, Z, Y, X, W, V, U, T)
            (B, A, Z, Y, X, W, V, U, T)
            (C, B, A, Z, Y, X, W, V, U, T)
            (D, C, B, A, Z, Y, X, W, V, U, T)
            (E, D, C, B, A, Z, Y, X, W, V, U, T)
            (T,)
          and $N others
note: required by a bound in `_::{closure#0}::DeriveResolvedValueAssertion::assert_impl_resolved_value`
 --> tests/derive_resolved_value/fail_simple_structs.rs:7:10
  |
7 | #[derive(ResolvedValue)]
  |          ^^^^^^^^^^^^^ required by this bound in `DeriveResolvedValueAssertion::assert_impl_resolved_value`
  = note: this error originates in the derive macro `ResolvedValue` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `UnresolvedValue: ResolvedValue` is not satisfied
  --> tests/derive_resolved_value/fail_simple_structs.rs:13:39
   |
13 | struct ContainsUnresolvedValueUnnamed(UnresolvedValue);
   |                                       ^^^^^^^^^^^^^^^ the trait `ResolvedValue` is not implemented for `UnresolvedValue`
   |
   = help: the following other types implement trait `ResolvedValue`:
             &str
             ()
             (A, Z, Y, X, W, V, U, T)
             (B, A, Z, Y, X, W, V, U, T)
             (C, B, A, Z, Y, X, W, V, U, T)
             (D, C, B, A, Z, Y, X, W, V, U, T)
             (E, D, C, B, A, Z, Y, X, W, V, U, T)
             (T,)
           and $N others
note: required by a bound in `_::{closure#0}::DeriveResolvedValueAssertion::assert_impl_resolved_value`
  --> tests/derive_resolved_value/fail_simple_structs.rs:12:10
   |
12 | #[derive(ResolvedValue)]
   |          ^^^^^^^^^^^^^ required by this bound in `DeriveResolvedValueAssertion::assert_impl_resolved_value`
   = note: this error originates in the derive macro `ResolvedValue` (in Nightly builds, run with -Z macro-backtrace for more info)
