{
  "$ref": "#/definitions/Schema",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Pipeline": {
      "additionalProperties": false,
      "properties": {
        "cache": {
          "default": true,
          "description": "Whether or not to cache the task outputs. Setting cache to false is useful for daemon or long-running \"watch\" or development mode tasks that you don't want to cache.",
          "type": "boolean"
        },
        "dependsOn": {
          "default": [],
          "description": "The list of tasks and environment variables that this task depends on.\n\nPrefixing an item in dependsOn with a ^ tells turbo that this pipeline task depends on the package's topological dependencies completing the task with the ^ prefix first (e.g. \"a package's build tasks should only run once all of its dependencies and devDependencies have completed their own build commands\").\n\nItems in dependsOn without ^ prefix, express the relationships between tasks at the package level (e.g. \"a package's test and lint commands depend on build being completed first\").\n\nPrefixing an item in dependsOn with a $ tells turbo that this pipeline task depends the value of that environment variable.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "outputs": {
          "default": [
            "dist/**",
            "build/**"
          ],
          "description": "The set of glob patterns of a task's cacheable filesystem outputs.\n\nNote: turbo automatically logs stderr/stdout to .turbo/run-<task>.log. This file is always treated as a cacheable artifact and never needs to be specified.\n\nPassing an empty array can be used to tell turbo that a task is a side-effect and thus doesn't emit any filesystem artifacts (e.g. like a linter), but you still want to cache its logs (and treat them like an artifact).",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Schema": {
      "additionalProperties": false,
      "properties": {
        "$schema": {
          "default": "https://turborepo.org/schema.json",
          "type": "string"
        },
        "baseBranch": {
          "default": "origin/master",
          "description": "The base branch or your git repository. Git is used by turbo in its hashing algorithm and --since CLI flag.",
          "type": "string"
        },
        "globalDependencies": {
          "default": [],
          "description": "A list of globs and environment variables for implicit global hash dependencies. Environment variables should be prefixed with $ (e.g. $GITHUB_TOKEN).\n\nAny other entry without this prefix, will be considered filesystem glob. The contents of these files will be included in the global hashing algorithm and affect the hashes of all tasks.\n\nThis is useful for busting the cache based on .env files (not in Git), environment variables, or any root level file that impacts package tasks (but are not represented in the traditional dependency graph\n\n(e.g. a root tsconfig.json, jest.config.js, .eslintrc, etc.)).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pipeline": {
          "additionalProperties": {
            "$ref": "#/definitions/Pipeline",
            "description": "The name of a task that can be executed by turbo run. If turbo finds a workspace package with a package.json scripts object with a matching key, it will apply the pipeline task configuration to that NPM script during execution. This allows you to use pipeline to set conventions across your entire Turborepo."
          },
          "default": {},
          "description": "An object representing the task dependency graph of your project. turbo interprets these conventions to properly schedule, execute, and cache the outputs of tasks in your project.",
          "type": "object"
        }
      },
      "required": [
        "pipeline"
      ],
      "type": "object"
    }
  }
}